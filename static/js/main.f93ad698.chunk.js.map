{"version":3,"sources":["Components/title.component.js","Components/quote-box.component.js","Components/footer.component.js","App.js","serviceWorker.js","index.js"],"names":["Title","id","QuoteBox","props","state","error","isLoaded","quotes","currentQuote","currentAuthor","handleQuote","bind","handleTweet","fetch","bypassCors","then","res","json","result","setState","len","this","length","randomIndex","Math","floor","random","randomQuoteObj","currentObjArray","Object","keys","map","key","document","getElementById","classList","toggle","setAttribute","className","onClick","href","target","rel","React","Component","Footer","jsx","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iSAWeA,G,kBARD,WACZ,OACE,oCACE,wBAAIC,GAAG,SAAP,oB,0CC6GSC,G,kBA/Gb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,OAAQ,GACRC,aAAc,+EACdC,cAAe,mBAGjB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAXF,E,iFAcE,IAAD,OAQlBE,MAAMC,2KACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAKC,SAAS,CACZb,UAAU,EACVC,OAAQW,EAAOX,YAGnB,SAACF,GACC,EAAKc,SAAS,CACZb,UAAU,EACVD,e,oCAOR,IAAMe,EAAMC,KAAKjB,MAAMG,OAAOe,OACxBC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWN,GAC3CO,EAAiBN,KAAKjB,MAAMG,OAAOgB,GAEnCK,EAAkBC,OAAOC,KAAKH,GAC/BI,KAAI,SAAUC,GACb,OAAOL,EAAeK,MAGtBxB,EAAeoB,EAAgB,GAC/BnB,EAAgBmB,EAAgB,GAEpCP,KAAKF,SAAS,CACZX,aAAcA,EACdC,cAAeA,IAIJwB,SAASC,eAAe,QAChCC,UAAUC,OAAO,iB,oCAITH,SAASC,eAAe,eAEhCG,aAAa,OAAlB,oDAAuEhB,KAAKjB,MAAMI,aAAlF,cAAoGa,KAAKjB,MAAMK,kB,+BAGvG,IAAD,EACkDY,KAAKjB,MAAtDC,EADD,EACCA,MAAOC,EADR,EACQA,SAAUE,EADlB,EACkBA,aAAcC,EADhC,EACgCA,cAEvC,OAAIJ,EAEA,yBAAKiC,UAAU,aAAf,2DAIoB,IAAbhC,EAEP,yBAAKgC,UAAU,aAAf,oCAMA,oCACE,yBAAKrC,GAAG,YAAYqC,UAAU,cAC5B,yBAAKA,UAAU,eACb,yBAAKA,UAAU,mBACb,yBAAKrC,GAAG,mBACN,yBAAKA,GAAG,kBACN,6BACE,uBAAGA,GAAG,QAAQO,GACd,uBAAGP,GAAG,UAAUQ,KAGpB,yBAAKR,GAAG,eACN,4BAAQA,GAAG,YAAYsC,QAASlB,KAAKX,aAArC,aACA,uBAAGT,GAAG,cAAcuC,MAAI,EAACC,OAAO,SAASC,IAAI,sBAAsBH,QAASlB,KAAKT,aAAa,oD,GApG3F+B,IAAMC,YC0BdC,MA3Bf,WACE,OACE,oCACE,2BAAOC,KAAG,GAAV,iTAeA,gCACE,uBAAGN,KAAK,4BAA4BC,OAAO,SAASC,IAAI,uBAAxD,6DCEOK,MAhBf,WACE,OACE,oCACE,yBAAK9C,GAAG,WACN,yBAAKA,GAAG,gBACR,yBAAKA,GAAG,WACR,yBAAKA,GAAG,mBACN,kBAAC,EAAD,MACA,kBAAC,EAAD,QAGJ,kBAAC,EAAD,QCNc+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASrB,SAASC,eAAe,SD2H3C,kBAAmBqB,WACrBA,UAAUC,cAAcC,MAAM1C,MAAK,SAAA2C,GACjCA,EAAaC,kB","file":"static/js/main.f93ad698.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../Styles/Title.css';\r\n\r\nconst Title = () => {\r\n  return (\r\n    <>\r\n      <h1 id='title'>Random Quotes</h1>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Title;","import React from 'react';\r\nimport '../Styles/Quote-box.css';\r\n\r\nclass QuoteBox extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      quotes: [],\r\n      currentQuote: 'The best time to plant a tree was 20 years ago. The second best time is now.',\r\n      currentAuthor: 'Chinese Proverb'\r\n    };\r\n\r\n    this.handleQuote = this.handleQuote.bind(this);\r\n    this.handleTweet = this.handleTweet.bind(this);\r\n  };\r\n\r\n  componentDidMount() {\r\n    const bypassCors = \"https://cors-anywhere.herokuapp.com/\";\r\n    // const bypassCors = \"https://crossorigin.me/\";\r\n\r\n    // raw format of my gist 'quotes.json'\r\n    // when gist updated, must provide new link of raw\r\n    const quotesJSON = \"https://gist.githubusercontent.com/safiyc/00897047c3fed1757971379046308134/raw/0084249abbe1e47e7376cefa04c2ceb0de5dff1b/quotes.json\";\r\n\r\n    fetch(bypassCors + quotesJSON)\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            quotes: result.quotes\r\n          });\r\n        },\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      );\r\n  };\r\n\r\n  handleQuote() {\r\n    const len = this.state.quotes.length;\r\n    const randomIndex = Math.floor(Math.random() * len);\r\n    let randomQuoteObj = this.state.quotes[randomIndex];\r\n\r\n    let currentObjArray = Object.keys(randomQuoteObj)\r\n      .map(function (key) {\r\n        return randomQuoteObj[key]\r\n      });\r\n\r\n    let currentQuote = currentObjArray[0];\r\n    let currentAuthor = currentObjArray[1];\r\n\r\n    this.setState({\r\n      currentQuote: currentQuote,\r\n      currentAuthor: currentAuthor\r\n    });\r\n\r\n\r\n    const text = document.getElementById('text');\r\n    text.classList.toggle('text-effect');\r\n  };\r\n\r\n  handleTweet() {\r\n    const href = document.getElementById('tweet-quote');\r\n\r\n    href.setAttribute('href', `https://twitter.com/intent/tweet?hashtags=${this.state.currentQuote} - ${this.state.currentAuthor}`);\r\n  };\r\n\r\n  render() {\r\n    const { error, isLoaded, currentQuote, currentAuthor } = this.state;\r\n\r\n    if (error) {\r\n      return (\r\n        <div className='error-box'>\r\n          ERROR: Failed to fetch quotes. Please try again later.\r\n        </div>\r\n      );\r\n    } else if (isLoaded === false) {\r\n      return (\r\n        <div className='error-box'>\r\n          Fetching quotes from database...\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <>\r\n          <div id='quote-box' className='pink-paper'>\r\n            <div className='green-paper'>\r\n              <div className='lightblue-paper'>\r\n                <div id='inner-quote-box'>\r\n                  <div id='text-container'>\r\n                    <div>\r\n                      <p id='text'>{currentQuote}</p>\r\n                      <p id='author'>{currentAuthor}</p>\r\n                    </div>\r\n                  </div>\r\n                  <div id='buttons-box'>\r\n                    <button id='new-quote' onClick={this.handleQuote}>New Quote</button>\r\n                    <a id='tweet-quote' href target='_blank' rel='noopener noreferrer' onClick={this.handleTweet}><button>Tweet</button></a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </>\r\n      );\r\n    };\r\n  };\r\n};\r\n\r\nexport default QuoteBox;\r\n","import React from 'react';\r\n\r\nfunction Footer() {\r\n  return (\r\n    <>\r\n      <style jsx>{`\r\n        footer {\r\n          position: absolute;\r\n          bottom: 10px;\r\n          width: 100%;\r\n          text-align: center;\r\n        } \r\n        a {\r\n          color: black;\r\n          text-decoration: none;\r\n        }\r\n        a:hover {\r\n          text-decoration: underline;\r\n        }\r\n      `}</style>\r\n      <footer>\r\n        <a href=\"http://www.safiycham.com/\" target=\"_blank\" rel='noopener noreferrer'>\r\n          Random Quotes&nbsp;&ndash;&nbsp;safiy cham &nbsp;&#169;&nbsp;2019\r\n        </a>\r\n      </footer>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Footer;","import React from 'react';\nimport './Styles/App.css';\n\nimport Title from './Components/title.component';\nimport QuoteBox from './Components/quote-box.component';\nimport Footer from './Components/footer.component';\n\nfunction App() {\n  return (\n    <>\n      <div id='wrapper'>\n        <div id='inner-frame' />\n        <div id='ribbon' />\n        <div id='content-wrapper'>\n          <Title />\n          <QuoteBox />\n        </div>\n      </div>\n      <Footer />\n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}